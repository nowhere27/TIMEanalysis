import os, csv, time, subprocess, shutil
from multiprocessing import Pool

# Variables
superDir = _REPLACE_DIR_
projDir = _REPLACE_PROJECT_DIR_
origDir_cell = superDir+'Cell_before_data/'
dataDir_cell = superDir+'Cell_forFilter/'
resDir_cell= superDir+'Cell_filtered_data/'
origDir_SP = superDir+'SP_before_data/'
dataDir_SP = superDir+'SP_forFilter/'
resDir_SP = superDir+'SP_filtered_data/'
cell_before = superDir+'Cell_before_qpdata/'

# Methods
# Input: directory Name
# Output: nothing (just performs directory clearing)
def clearDir(path):
    dirName = path.split('/')[-2]

    if(dirName not in os.listdir(superDir)):
    	os.mkdir(path)
    else:
        fList = os.listdir(path)
        for f in fList:
            os.remove(path+f)

# Input: string of column names
# Output: (list of cleared column names, idx of object_id, DAB_nucleus, DAB_cytoplasm)
def makeColNames_cell(cols):
    nameList = cols.split(',')
    nameList = map(lambda x:x.replace('0.50 ?m per pixel',''),nameList)
    nameList = map(lambda x:x.replace(' ', '_'),nameList)
    nameList = map(lambda x:x.replace(':', '_'),nameList)
    nameList = map(lambda x:x.replace('/', '_'),nameList)
    nameList = map(lambda x:x.replace('__','_'),nameList)
    nameList = map(lambda x:x.replace('__','_'),nameList)
    nameList = map(lambda x:x.replace('_(25.0_?m)_','_'),nameList)
    nameList = map(lambda x:x.replace('_(F0)',''),nameList)
    nameList = map(lambda x:x.replace('_(F1)',''),nameList)
    nameList = map(lambda x:x.replace('_(F2)',''),nameList)
    nameList = map(lambda x:x.replace('_(F3)',''),nameList)
    nameList = map(lambda x:x.replace('_(F4)',''),nameList)
    nameList = map(lambda x:x.replace('_(F5)',''),nameList)
    nameList = map(lambda x:x.replace('_(F6)',''),nameList)
    nameList = map(lambda x:x.replace('_(F7)',''),nameList)
    nameList = map(lambda x:x.replace('_(F8)',''),nameList)
    nameList = map(lambda x:x.replace('_(F9)',''),nameList)
    nameList = map(lambda x:x.replace('_(F10)',''),nameList)
    nameList = map(lambda x:x.replace('_(F11)',''),nameList)
    nameList = map(lambda x:x.replace('_(F12)',''),nameList)
    nameList = map(lambda x:x.replace('_?m^2',''),nameList)
    nameList = map(lambda x:x.replace('_?m',''),nameList)
    nameList = map(lambda x:x.replace('Std.dev.','stdev'),nameList)
    nameList = map(lambda x:x.strip(),nameList)

    return (nameList, nameList.index('Object_Id'), nameList.index('Nucleus_DAB_OD_mean'), nameList.index('Cytoplasm_DAB_OD_mean'))

# Input: string of column names
# Output: (list of cleared column names, idx of object_id)
def makeColNames_SP(cols):
    nameList = cols.split(',')
    nameList = map(lambda x:x.replace('0.50 ?m per pixel',''),nameList)
    nameList = map(lambda x:x.replace(' ', '_'),nameList)
    nameList = map(lambda x:x.replace(':', '_'),nameList)
    nameList = map(lambda x:x.replace('/', '_'),nameList)
    nameList = map(lambda x:x.replace('__','_'),nameList)
    nameList = map(lambda x:x.replace('__','_'),nameList)
    nameList = map(lambda x:x.replace('_(25.0_?m)_','_'),nameList)
    nameList = map(lambda x:x.replace('_(F0)',''),nameList)
    nameList = map(lambda x:x.replace('_(F1)',''),nameList)
    nameList = map(lambda x:x.replace('_(F2)',''),nameList)
    nameList = map(lambda x:x.replace('_(F3)',''),nameList)
    nameList = map(lambda x:x.replace('_(F4)',''),nameList)
    nameList = map(lambda x:x.replace('_(F5)',''),nameList)
    nameList = map(lambda x:x.replace('_(F6)',''),nameList)
    nameList = map(lambda x:x.replace('_(F7)',''),nameList)
    nameList = map(lambda x:x.replace('_(F8)',''),nameList)
    nameList = map(lambda x:x.replace('_(F9)',''),nameList)
    nameList = map(lambda x:x.replace('_(F10)',''),nameList)
    nameList = map(lambda x:x.replace('_(F11)',''),nameList)
    nameList = map(lambda x:x.replace('_(F12)',''),nameList)
    nameList = map(lambda x:x.replace('_?m^2',''),nameList)
    nameList = map(lambda x:x.replace('_?m',''),nameList)
    nameList = map(lambda x:x.replace('Std.dev.','stdev'),nameList)
    nameList = map(lambda x:x.replace('_25_','_'),nameList)
    nameList = map(lambda x:x.replace('_2.00_per_pixel_','_'),nameList)
    nameList = map(lambda x:x.strip(),nameList)

    return (nameList, nameList.index('Object_Id'))

# Unit processors
# Input: cell data list generated by QuPath
# Output: cell data list ready for classification by R (some features removed, column names organized and a new feature calculated)
def processCellData_unit(f):
    data = open(origDir_cell+f).readlines()
    cols_raw = data[0]
    dataList = data[1:]
    (cols, idx_id, idx_DAB_nuc, idx_DAB_cyt) = makeColNames_cell(cols_raw)
    resF = open(dataDir_cell+f,'wb')
    res = csv.writer(resF, delimiter=',', lineterminator='\n')

    print(f)
    res.writerow(['Object_Id']+cols[5:idx_id]+cols[idx_id+1:]+['Nucleus_DAB_normalized'])
    for cell in dataList:
        try:
            items = cell.strip().split(',')
            objId = items[idx_id]
            normalized = float(items[idx_DAB_nuc])-float(items[idx_DAB_cyt])

            if('NaN' in items):
                pass
            else:
                res.writerow([objId]+items[5:idx_id]+items[idx_id+1:]+[normalized])
        except IndexError:
            pass
    resF.close()

    # move orig to _completed
    #os.rename(origDir_cell+f,orig_completed_cell+f)

def processSPData_unit(f):
    data = open(origDir_SP+f).readlines()
    cols_raw = data[0]
    dataList = data[1:]
    (cols, idx_id) = makeColNames_SP(cols_raw)
    resF = open(dataDir_SP+f,'wb')
    res = csv.writer(resF, delimiter=',', lineterminator='\n')

    print(f)
    res.writerow(['Object_Id']+cols[5:idx_id]+cols[idx_id+1:])
    for SP in dataList:
        try:
            items = SP.strip().split(',')
            objId = items[idx_id]

            if('NaN' in items):
                pass
            else:
                res.writerow([objId]+items[5:idx_id]+items[idx_id+1:])
        except IndexError:
            pass
    resF.close()

    # move orig to _completed
    #os.rename(origDir_SP+f,orig_completed_SP+f)

# Copy cell_before_qpdata to Data
def forNextStep_unit(f):
    print f
    shutil.copy2(cell_before+f[:-4]+'.qpdata',projDir+'data/')

# Actual multiprocessors
def processCellData(fList):
    clearDir(dataDir_cell)

    try:
        #pool = Pool(processes=1)
        pool = Pool()
        result = pool.map(processCellData_unit, fList)
    finally:
        pool.close()
        pool.join()

def processSPData(fList):
    clearDir(dataDir_SP)

    try:
        #pool = Pool(processes=1)
        pool = Pool()
        result = pool.map(processSPData_unit, fList)
    finally:
        pool.close()
        pool.join()

def classifyCell(fList):
    clearDir(resDir_cell)
    subprocess.call(['Rscript',projDir.replace('/','\\')+"scripts\\classifyCell.R"])

def classifySP(fList):
    clearDir(resDir_SP)
    subprocess.call(['Rscript',projDir.replace('/','\\')+"scripts\\classifySP.R"])

def forNextStep(fList):
    try:
        #pool = Pool(processes=1)
        pool = Pool()
        result = pool.map(forNextStep_unit, fList)
    finally:
        pool.close()
        pool.join()


# __main__
if __name__ == '__main__':
    start = time.time()
    fList = os.listdir(origDir_cell)

    processCellData(fList)
    classifyCell(fList)
    forNextStep(fList)
    processSPData(fList)
    classifySP(fList)


    end = time.time()
    print str((end-start)/60)+' minutes'
